import{_ as o,c as l,a as n,d as e,e as a,b as p,r as c,o as i}from"./app-lSJJfXGm.js";const u="/assets/1-C_UJrkHR.jpg",r="/assets/2-DrwIY9xl.jpg",d="/assets/3-CSOu4Xa5.png",k="/assets/4-CLJW1Xxy.png",m={},v={href:"https://tieba.baidu.com/p/5033115738",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/shirukai/article/details/115381505",target:"_blank",rel:"noopener noreferrer"};function h(b,s){const t=c("ExternalLinkIcon");return i(),l("div",null,[s[8]||(s[8]=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言"},[n("span",null,"前言")])],-1)),s[9]||(s[9]=n("p",null,[a("PSTouch是远古的ps安卓版本，貌似在安卓5时期就不再更新了。现在网上能搜到一个适配了安卓9的版本，名字被改为了PSCC，版本号被改成了9.9.9，包名为"),n("code",null,"air.com.adobe.pstouchphone"),a("。本次修改基于这个版本。貌似还有一个为平板打造的横屏版本，应该都差不多。")],-1)),n("p",null,[s[1]||(s[1]=a("在安卓12上，pstouch会出现文字变为方框的问题。经搜索，发现早在安卓7时期就出现过类似的问题，解决方法是手动放字体文件：帖子")),n("a",v,[s[0]||(s[0]=a("手把手教你安卓7.0完美运行PS Touch+修复乱码！！！")),p(t)]),s[2]||(s[2]=a("。不过需要root，因为字体目录为")),s[3]||(s[3]=n("code",null,"/system/fonts",-1)),s[4]||(s[4]=a("。"))]),s[10]||(s[10]=e('<p>考虑使用一种方法，在安卓12上不root也能让pstouch读取到字体。</p><p>修复前：</p><p><img src="'+u+'" alt="Alt text"></p><p>修复后：</p><p><img src="'+r+'" alt="Alt text"></p><h2 id="探索过程" tabindex="-1"><a class="header-anchor" href="#探索过程"><span>探索过程</span></a></h2><p>开启debug后启动pstouch并连接android studio，logcat中会输出一大串字体相关的日志，例如<code>system font and fallback font files specify a duplicate font /system/fonts/ , skipping the second occurrence</code>。其中相关路径也是<code>/system/fonts</code>。</p><p>由于<code>/system/fonts</code>这个目录需要root权限才能访问，所以需要将这个目录换掉。思路就是在apk的dex或so中搜索这个目录相关的字符串，找到后替换为外部存储路径（比如<code>/storage/emulated/0/Fonts</code>）即可。</p><h3 id="定位相关代码" tabindex="-1"><a class="header-anchor" href="#定位相关代码"><span>定位相关代码</span></a></h3><p>经搜索，dex中没有相关信息。而在搜索so时，虽然找到了<code>/system</code>或<code>/fonts</code>相关字符串，但改了之后并没有效果，logcat中字体报错部分的路径仍然是/system/fonts/。</p><p>既然不是直接获取，那就是间接获取了。这个路径可能是作为环境变量被设置好了，然后应用直接从环境变量中读取。</p><p>首先通过java代码<code>System.getenv()</code>，在安卓应用启动后获取全部的环境变量并打印日志。发现没有环境变量对应的是<code>/system/fonts</code>，但是有一个可以利用上的<code>ANDROID_ROOT=/system</code>。如果获取到这个环境变量的值，再拼接一段字符串<code>&quot;/fonts&quot;</code>就成了。</p><p>遂搜索字符串<code>ANDROID_ROOT</code>，发现在so中确实有这个</p><p><img src="'+d+'" alt="Alt text"></p><p>将其改成别的，再看logcat，发现字体日志部分，路径变为<code>/fonts/</code>了，说明<code>/system</code>这一部分路径确实是用环境变量获取的。需要修改的地方就是这里。</p><p><img src="'+k+'" alt="Alt text"></p><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改"><span>修改</span></a></h3><p>有两种思路：</p><ol><li>修改路径前半部分。即修改环境变量的值，例如改为<code>/sdcard</code>，然后拼接成完整路径为<code>/sdcard/fonts/</code>。</li><li>只保留路径后半部分。即给一个空的环境变量名，例如<code>NNN_ROOT</code>，然后将<code>/fonts/</code>改为<code>/sdcard/fonts/</code>。</li></ol><p>由于是修改so，不方便改变现有字符串长度，第二种方法在有限的空间内可能装不下太长的字符串，所以选择第一种方法。</p>',20)),n("p",null,[s[6]||(s[6]=a("修改环境变量的方法可以参考")),n("a",g,[s[5]||(s[5]=a("Java单元测试动态修改环境变量")),p(t)]),s[7]||(s[7]=a("，使用反射修改map或jni，我选择jni了，需要android studio生成一个apk，然后提取里面的32位so。"))]),s[11]||(s[11]=e(`<ul><li><p>dex修改：</p><ul><li>新增一个类。其中test.setEnv()是native方法。<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> test<span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">setEnv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;some-helper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setEnvsForRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        test<span class="token punctuation">.</span><span class="token function">setEnv</span><span class="token punctuation">(</span><span class="token string">&quot;BNDROID_ROOT&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/sdcard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;测试环境变量&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BNDROID_ROOT=&quot;</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;BNDROID_ROOT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>在<code>air.com.adobe.pstouchphone.AppEntry.onCreate()</code>中，调用完super.onCreate()后设置环境变量。添加一行：<div class="language-smali line-numbers-mode" data-highlighter="prismjs" data-ext="smali" data-title="smali"><pre><code><span class="line">invoke-static <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token builtin">L</span><span class="token namespace">com<span class="token punctuation">/</span>example<span class="token punctuation">/</span></span><span class="token class-name">test</span></span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">setEnvsForRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">V</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>native函数：在some-helper.c中</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"></span>
<span class="line">JNIEXPORT <span class="token keyword">int</span> JNICALL</span>
<span class="line"><span class="token function">Java_com_example_test_setEnv</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jclass clazz<span class="token punctuation">,</span> jstring j_name<span class="token punctuation">,</span> jstring j_value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>value <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_name<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_value<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">setenv</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编辑libCore.so: 搜索<code>ANDROID_ROOT</code>字符串改为<code>BNDROID_ROOT</code>。</p></li></ul><hr><p>改好之后，应用会读取BNDROID_ROOT环境变量，字体完整路径为<code>/sdcard/fonts</code>。也就是手机存储目录下的fonts文件夹，这个只要给应用存储权限就可以访问得到了。当然，还需要手动把字体文件放到这个目录中，也可以写点代码让应用启动后自动把ttf放到这个目录中，不过懒得写了。</p><p>成品：https://wwqv.lanzout.com/ihhOR0wowpmb</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ol><li>问题出现原因：无法读取到中文字体。不清楚为什么，理论上apk里应该是带了中文字体的。</li><li>实际读取字体目录为<code>/system/fonts</code>，其中<code>/system</code>部分是从环境变量<code>ANDROID_ROOT</code>获取而来。</li><li>安卓应用修改环境变量，可以在java中反射获取map修改，或在native函数正常修改。</li><li>然而在我的鸿蒙3上测试，画布触摸没有反馈，也就是说没法编辑图片。在朋友的小米安卓12上测试是可以正常使用的。</li></ol>`,6))])}const y=o(m,[["render",h],["__file","index.html.vue"]]),O=JSON.parse('{"path":"/blogs/2023/spring/pstouchAndroid12ChFont/","title":"修复PSTouch在安卓12上中文字体无法显示的问题","lang":"zh-CN","frontmatter":{"date":"2023-5-20 14:44:31","title":"修复PSTouch在安卓12上中文字体无法显示的问题","categories":["应用"],"tags":["psTouch","环境变量"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"探索过程","slug":"探索过程","link":"#探索过程","children":[{"level":3,"title":"定位相关代码","slug":"定位相关代码","link":"#定位相关代码","children":[]},{"level":3,"title":"修改","slug":"修改","link":"#修改","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1684571386000,"updatedTime":1684571386000,"contributors":[{"name":"ewt45","email":"79033456+ewt45@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/2023/spring/pstouchAndroid12ChFont/index.md"}');export{y as comp,O as data};
