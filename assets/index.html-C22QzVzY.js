import{_ as r,c,a,d as p,b as e,f as l,e as s,r as o,o as d}from"./app-lSJJfXGm.js";const u="/assets/1-CdYB5rde.jpg",k={},v={class:"table-of-contents"},m={href:"https://developer.android.google.cn/develop/ui/views/animations/prop-animation?hl=zh-cn#layout",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.jianshu.com/p/1336111f81c9",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/yingaizhu/article/details/109526812",target:"_blank",rel:"noopener noreferrer"};function b(x,n){const t=o("router-link"),i=o("ExternalLinkIcon");return d(),c("div",null,[a("nav",v,[a("ul",null,[a("li",null,[e(t,{to:"#设计"},{default:l(()=>n[0]||(n[0]=[s("设计")])),_:1})]),a("li",null,[e(t,{to:"#视图"},{default:l(()=>n[1]||(n[1]=[s("视图")])),_:1})]),a("li",null,[e(t,{to:"#代码"},{default:l(()=>n[2]||(n[2]=[s("代码")])),_:1})]),a("li",null,[e(t,{to:"#新知识"},{default:l(()=>n[3]||(n[3]=[s("新知识")])),_:1}),a("ul",null,[a("li",null,[e(t,{to:"#代码获取主题颜色-attr"},{default:l(()=>n[4]||(n[4]=[s("代码获取主题颜色（attr）")])),_:1})]),a("li",null,[e(t,{to:"#禁止edittext等创建后自动获取焦点"},{default:l(()=>n[5]||(n[5]=[s("禁止edittext等创建后自动获取焦点")])),_:1})]),a("li",null,[e(t,{to:"#视图变化时添加动画效果"},{default:l(()=>n[6]||(n[6]=[s("视图变化时添加动画效果")])),_:1})])])]),a("li",null,[e(t,{to:"#待实现"},{default:l(()=>n[7]||(n[7]=[s("待实现")])),_:1})]),a("li",null,[e(t,{to:"#其他无关"},{default:l(()=>n[8]||(n[8]=[s("其他无关")])),_:1})])])]),n[14]||(n[14]=p('<p><img src="'+u+`" alt="图1"></p><h2 id="设计" tabindex="-1"><a class="header-anchor" href="#设计"><span>设计</span></a></h2><ul><li><p>参数类型</p><ul><li>环境变量（env）</li><li>命令(cmd)</li></ul></li><li><p>插入位置</p><ul><li>环境变量位置(env)</li><li>wine命令开头(front)</li><li>wine命令前/后（单独命令，加&amp;）(earlier、later)</li></ul></li><li><p>是否启用：开启/关闭</p></li><li><p>别名（用户友好）</p></li><li><p>参数组：包含多个功能类似的子参数，且最多只能有一个被启用。在外部仍然被识别为一个Argument对象。</p><ul><li>别名规则：则可以将其别名改为<code>主名称---副名称</code>，中间用三个减号分隔。读取txt时会将多个相同主名称，不同副名称的参数合并为一个参数组。</li></ul></li></ul><hr><p>存为文本：</p><ul><li>参数库：edpatch/contArgs.txt。包含全部可使用的参数。</li><li>每个容器：/home/xdroid_n/contArgs.txt。仅包含部分启用的参数。新建容器时只添加参数库中默认启用（e）的那些参数。</li></ul><p>示例</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">d env env KEY=VAL</span>
<span class="line">e cmd front ib</span>
<span class="line">d cmd earlier simple.sh</span>
<span class="line">e cmd later wine taskkill /f /im services.exe</span>
<span class="line">d cmd later run_some_exe wine explorer /desktop=shell taskmgr</span>
<span class="line">d env env MESA_GL_VERSION_OVERRIDE---2.1 MESA_GL_VERSION_OVERRIDE=2.1</span>
<span class="line">d env env MESA_GL_VERSION_OVERRIDE---3.3 MESA_GL_VERSION_OVERRIDE=3.3</span>
<span class="line">d env env MESA_GL_VERSION_OVERRIDE---4.6 MESA_GL_VERSION_OVERRIDE=4.6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>每个容器设置界面都可以修改参数库，但是保存设置时只会更新参数库txt和当前容器txt，所以容器txt的内容可能会滞后，因此容器启用的参数应以参数库中有的为准，容器txt仅用作对比参数库中的某个参数是否应该启用。</li></ul><hr><p>Argument类</p><ul><li><p>基本成员变量</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token class-name">String</span> <span class="token constant">TYPE_ENV</span> <span class="token operator">=</span> <span class="token string">&quot;env&quot;</span><span class="token punctuation">,</span> <span class="token constant">TYPE_CMD</span> <span class="token operator">=</span> <span class="token string">&quot;cmd&quot;</span><span class="token punctuation">,</span> <span class="token constant">TYPE_GROUP</span><span class="token operator">=</span><span class="token string">&quot;group&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token class-name">String</span> <span class="token constant">POS_ENV</span> <span class="token operator">=</span> <span class="token string">&quot;env&quot;</span><span class="token punctuation">,</span> <span class="token constant">POS_FRONT</span> <span class="token operator">=</span> <span class="token string">&quot;front&quot;</span><span class="token punctuation">,</span> <span class="token constant">POS_EARLIER</span> <span class="token operator">=</span> <span class="token string">&quot;earlier&quot;</span><span class="token punctuation">,</span> <span class="token constant">POS_LATER</span> <span class="token operator">=</span> <span class="token string">&quot;later&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">boolean</span> mIsEnableByDefault<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">String</span> mArgType<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">String</span> mArgPos<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">String</span> mArg<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">String</span> mAlias <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">boolean</span> mIsChecked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Argument</span><span class="token punctuation">&gt;</span></span> mGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>isGroup()用于判断该对象是否为参数组。getCheckedSubParamsInGroup()用于获取参数组中勾选的那个子参数。</p></li></ul><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图"><span>视图</span></a></h2><ol><li><p>点击pref选项后显示的dialog：</p><ul><li>最上方为两个按钮：添加参数和预览。</li><li>用回收视图显示参数库列表。每一项包含：勾选框，别名，操作菜单，第二视图。</li><li>拖拽排序</li></ul></li><li><p>回收视图的item</p><ul><li>普通单参数：若勾选，则在当前容器启用。操作菜单可以对其修改或删除。删除是从参数库中删除，所以其他容器也将无法使用该参数。</li><li>cpu核心选择核心数若启用，则在第二视图显示八个勾选框表示核心选择。</li><li>参数组自身没有勾选框和操作菜单。勾选框位置变成下拉按钮，点击后展开第二视图，为其包括的全部子参数。子参数和单参数基本相同，但若勾选一个，则其他的取消勾选。</li></ul></li><li><p>编辑/添加参数</p><ul><li>需要填写：别名，参数内容，类型，新容器是否默认开启</li><li>别名不能带空格。</li><li>参数不能为空。若为环境变量类型，必须包含等号。</li><li>首尾去除空格。</li><li>完成编辑时，需要重新判断，当前参数是单参数还是参数组。然后回收视图的adapter notifyChange或insert</li></ul></li><li><p>删除参数</p><ul><li>删除前弹出对话框提示用户该操作会影响全部容器。确认删除后对adapter notifyChange或delete</li><li>删除了全局参数库的参数，但最后保存时只会修改当前容器txt，其他容器的数据不会立即更新。所以 <ol><li>在删除时提醒用户，防止用户把这个操作和对当前容器的启用和禁用搞混。</li><li>在容器设置点开dialog时，读取到的参数列表以参数库txt中有的项为准，容器txt仅用于对比某参数是否应该勾选。（但是这样就无法实现容器参数拖拽排序了。。）</li></ol></li></ul></li><li><p>预览按钮点击后的dialog</p><ul><li>显示原命令实例（可更改）和插入参数后的完整命令。</li></ul></li><li><p>关闭对话框（txt存储与读取）</p><ul><li>显示dialog时，txt读取一次，存为<code>public final static List&lt;Argument&gt; all</code> 列表。此后编辑操作均修改该列表。仅在关闭dialog时，将参数库全部参数存到全局txt，并且将勾选的存到容器txt。</li></ul></li></ol><hr><p>读取参数库txt：</p><ul><li>isChecked： <ul><li>当前参数是否勾选，取决于容器txt中是否包含该参数。但还要考虑容器txt不存在时，应该看该参数是否默认启用。</li></ul></li><li>每读取新一行时，应首先检查能否和已读取的单参数合并成参数组（参数都以<code>主名称---</code>开头）或加入已有参数组（有个参数（实际是参数组）的别名是<code>主名称</code>）。如果不能变为参数组，则添加到列表作为新的一项。</li><li>读取完参数库txt后，若容器txt不存在，则将默认启用的参数写入容器txt。</li><li>最后将cpu核心设置放到all的第一项。</li></ul><p>保存参数库txt时先将第一个作为cpu核心选项存为pref，其他的存到参数库txt，注意参数组需要存入其所有子参数</p><hr><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h2><p>注意用了recyclerview回收视图，父布局的滚动视图用NestedScrollView而不是普通的ScrollView。</p><hr><p>参数组的勾选框要变成下拉按钮。不过可以只用同一个勾选框实现。</p><ul><li>单参数不设置文字。参数组就隐藏勾选框drawable，并给文字设置成<code>▶</code>。</li><li>代码中隐藏勾选框drawable调用方法<code>checkbox.setButtonDrawable(null)</code></li></ul><p>CheckBox自身小于48dp。如果固定宽高48dp的话，纯勾选框或者纯文本没法居中，只好外部再套一个相对布局了。</p><ul><li>给相对布局自身设置gravity，对全部子布局生效<code>relative.setGravity(Gravity.CENTER);</code></li><li>设置48dp的初衷是checkbox本身过小不易点击，想要checkbox在相对布局里居中需要wrap_content，这样一来勾选框占地面积又变小了，想要保留初衷，就给相对布局也设置一个点击事件：点相对布局就点一下checkbox <code>relative.setOnClickListener(v -&gt; checkBox.performClick());</code></li></ul><hr><p>参数别名过长：为统一样式，默认显示一行。点击文字后会展开全部。原本想着用textview自带的方法ScrollingMovementMethod，结果这个由于textview很扁，触摸位置很难保持在文本上，而且还不平滑，就放弃了。</p><p>编辑参数的别名时，要求不能包含空格。貌似edittext写Filter还挺麻烦的，干脆写在textchange的监听里，在after里若发现空格就删除。</p><hr><p>能否在参数组的子参数只剩一个时自动变为单参数样式？.测试结果：可以。调用notifyItemChanged时会重新onCreate和onBind，所以会创建新的holder，viewtype也会随之刷新。</p><p>另外注意，在onBindViewHolder时，doc推荐用holder.getAdapterPosition()获取数据项的位置，而不是直接存储传入的参数position。</p><hr><p>为参数添加别名后，考虑别名本地化的问题： 在代码中设置参数库默认的txt内容时，使用了多语言的别名。 硬编码字符串直接写在了txt中，所以txt一旦生成则无法多语言。 因此，如果modder要自己修改默认参数库内容，则应该在dex中直接修改字符串，而非在obb中内置修改后的txt。</p><p>修改参数界面，参数类型添加说明：环境变量: 环境变量会作为本次执行命令的环境变量，原命令开头若包含相同名称的环境变量，则会覆盖该参数的值。\\n\\n命令：若选择在原命令执行前/后，则此参数的命令与原命令间用一个 &amp; 连接。</p><hr><p>废弃的构思：</p><ul><li>视图：ListView https://blog.csdn.net/berber78/article/details/7347217</li><li>item视图可以用android.R.layout.simple_list_item_multiple_choice</li><li>textview 可以从android自带的layout里inflate android.R.layout.simple_list_item_1，避免过矮或颜色过浅。</li><li>textview 想横向滑动，可以setMovementMethod。但是即使自身高度很高，但是触摸位置不在文本上，而是在空白处，貌似也没法滑动。<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">textView.setSingleLine(true);</span>
<span class="line">textView.setMovementMethod(new ScrollingMovementMethod());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>recyclerview永远显示滚动条，自己的apk没问题，加到exagear里报错。只好删了。Attempt to invoke virtual method &#39;android.widget.ScrollBarDrawable android.widget.ScrollBarDrawable.mutate()&#39; on a null object reference。<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">recyclerView.setVerticalScrollBarEnabled(true);</span>
<span class="line">recyclerView.setScrollbarFadingEnabled(false);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="新知识" tabindex="-1"><a class="header-anchor" href="#新知识"><span>新知识</span></a></h2><h3 id="代码获取主题颜色-attr" tabindex="-1"><a class="header-anchor" href="#代码获取主题颜色-attr"><span>代码获取主题颜色（attr）</span></a></h3><p>attr为某个属性值，根据主题设置的颜色等自动适配，具体是什么，取决于它定义的返回值是什么类型，可以是style，也可以是integer。</p><p>代码中获取attr值，可以用TypedArray。 标题textview，设置深色，可以获取attr值</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">TypedArray</span> array<span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>attr<span class="token punctuation">.</span>textColorPrimary<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> color <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">array<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="禁止edittext等创建后自动获取焦点" tabindex="-1"><a class="header-anchor" href="#禁止edittext等创建后自动获取焦点"><span>禁止edittext等创建后自动获取焦点</span></a></h3><p><strong>如何取消edittext焦点</strong>？在根布局设置</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">android:focusable=&quot;true&quot; </span>
<span class="line">android:focusableInTouchMode=&quot;true&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果代码中，最好再加上一个<code>rootWrapper.requestFocus();</code></p><ul><li>根布局是线性布局时没事，NestedScrollView的时候不加这个就没效果</li><li>这个还解决了用nestedScrollview的时，textview+recyclerview会自动滚动到回收视图开头，textview被顶上去的问题。看来也是回收视图自动获取焦点了。</li></ul><h3 id="视图变化时添加动画效果" tabindex="-1"><a class="header-anchor" href="#视图变化时添加动画效果"><span>视图变化时添加动画效果</span></a></h3>`,50)),a("ol",null,[n[13]||(n[13]=a("li",null,[a("p",null,[s("TransitionManager: "),a("code",null,"TransitionManager.beginDelayedTransition(viewGroup)"),s(" 这个放在视图修改的代码之前就行。但动画效果并不是很好。")])],-1)),a("li",null,[n[12]||(n[12]=a("p",null,[s("LayoutTransition: "),a("code",null,"viewGroup.setLayoutTransition(new LayoutTransition());"),s(" 这个相当于xml里的"),a("code",null,"animateLayoutChanges=true"),s("，比TransitionManager的效果能好点。默认只支持子布局添加/移除，或visibility变化时。")],-1)),a("ul",null,[a("li",null,[a("a",m,[n[9]||(n[9]=s("官方文档")),e(i)])]),a("li",null,[a("a",g,[n[10]||(n[10]=s("如何支持子布局宽高变化")),e(i)])]),a("li",null,[a("a",h,[n[11]||(n[11]=s("LayoutTransition更详细的使用说明")),e(i)])])])])]),n[15]||(n[15]=p('<h2 id="待实现" tabindex="-1"><a class="header-anchor" href="#待实现"><span>待实现</span></a></h2><ul><li><p>目前两个命令的拼接只支持 &amp;。但实际有更多可能 &amp;&amp; &amp; ||</p></li><li><p>数据：model类里再添加一个Argument列表吧</p></li><li><p>参数编辑完成时，使是编辑现有，也可能从单参数变为参数组。这里缺少判断</p></li><li><p>拖拽排序 https://blog.csdn.net/m0_60746014/article/details/125664917 https://developer.android.google.cn/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback#onmove</p></li></ul><h2 id="其他无关" tabindex="-1"><a class="header-anchor" href="#其他无关"><span>其他无关</span></a></h2><p>顺便一提Process Lasso貌似可以更准确地设置核心</p><p>突然发现支持分组之后也可以添加TZ 时区环境变量了。但是从逻辑上来讲，这个环境变量的添加放到</p><p>fab里新增一个，读取当前apk全部已安装的功能的版本</p>',6))])}const y=r(k,[["render",b],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/blogs/2023/winter/exagearOtherArgv/","title":"ED自助补丁新功能： 容器设置 - 额外启动参数","lang":"zh-CN","frontmatter":{"date":"2023-11-25 22:11:46","title":"ED自助补丁新功能： 容器设置 - 额外启动参数","categories":["exagear"],"tags":["android"]},"headers":[{"level":2,"title":"设计","slug":"设计","link":"#设计","children":[]},{"level":2,"title":"视图","slug":"视图","link":"#视图","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":2,"title":"新知识","slug":"新知识","link":"#新知识","children":[{"level":3,"title":"代码获取主题颜色（attr）","slug":"代码获取主题颜色-attr","link":"#代码获取主题颜色-attr","children":[]},{"level":3,"title":"禁止edittext等创建后自动获取焦点","slug":"禁止edittext等创建后自动获取焦点","link":"#禁止edittext等创建后自动获取焦点","children":[]},{"level":3,"title":"视图变化时添加动画效果","slug":"视图变化时添加动画效果","link":"#视图变化时添加动画效果","children":[]}]},{"level":2,"title":"待实现","slug":"待实现","link":"#待实现","children":[]},{"level":2,"title":"其他无关","slug":"其他无关","link":"#其他无关","children":[]}],"git":{"createdTime":1700968543000,"updatedTime":1700968543000,"contributors":[{"name":"ewt45","email":"79033456+ewt45@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/2023/winter/exagearOtherArgv/index.md"}');export{y as comp,f as data};
