import{_ as i,c as u,a as s,d as l,b as e,f as p,e as a,r as c,o as r}from"./app-lSJJfXGm.js";const k={},d={class:"table-of-contents"},m={href:"https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cgit.freedesktop.org/xorg/proto/xproto/tree/Xproto.h",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.x.org/wiki/Development/Documentation/Protocol/OpCodes/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://wwqv.lanzout.com/iyFyv0thllti",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html#XListFonts",target:"_blank",rel:"noopener noreferrer"};function f(y,n){const t=c("router-link"),o=c("ExternalLinkIcon");return r(),u("div",null,[s("nav",d,[s("ul",null,[s("li",null,[e(t,{to:"#前言"},{default:p(()=>n[0]||(n[0]=[a("前言")])),_:1})]),s("li",null,[e(t,{to:"#将已写好的补充函数添加到apk"},{default:p(()=>n[1]||(n[1]=[a("将已写好的补充函数添加到apk")])),_:1})]),s("li",null,[e(t,{to:"#探索过程"},{default:p(()=>n[2]||(n[2]=[a("探索过程")])),_:1}),s("ul",null,[s("li",null,[e(t,{to:"#处理函数的函数层注解"},{default:p(()=>n[3]||(n[3]=[a("处理函数的函数层注解")])),_:1})]),s("li",null,[e(t,{to:"#处理函数的参数层注解"},{default:p(()=>n[4]||(n[4]=[a("处理函数的参数层注解")])),_:1})]),s("li",null,[e(t,{to:"#处理函数的返回值"},{default:p(()=>n[5]||(n[5]=[a("处理函数的返回值")])),_:1})]),s("li",null,[e(t,{to:"#自己编写处理函数"},{default:p(()=>n[6]||(n[6]=[a("自己编写处理函数")])),_:1})])])]),s("li",null,[e(t,{to:"#总结"},{default:p(()=>n[7]||(n[7]=[a("总结")])),_:1})])])]),n[16]||(n[16]=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>wine更新了8.6（目前只有Kron4ek的编译版本，不知道为啥官网没更新）。使用ex的xserver打开后，直接闪退了，并在x86-stderr.txt中出现了如下报错。Wine staging5.0以上也会出现类似报错。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">X Error of failed request:  BadRequest (invalid request code or no such operation)</span>
<span class="line">  Major opcode of failed request:  49 (X_ListFonts)</span>
<span class="line">  Serial number of failed request:  6</span>
<span class="line">  Current serial number in output stream:  6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察ex的dex，发现在<code>Opcodes</code>类中定义了ListFonts常量恰好为49，而且同包名（<code>com.eltechs.axs.requestHandlers.core</code>）下，有很多类，里面的方法带着注解<code>@RequestHandler(opcode = 数字)</code>，也就是对应opcode的函数实现。</p><p>查阅资料，发现这个是X11的核心协议的一部分，看来是exagear没有实现全，那么就要手动添加上了。</p>`,5)),s("ul",null,[s("li",null,[s("a",m,[n[8]||(n[8]=a("官方对于xlib的说明及完整列表")),e(o)])]),s("li",null,[s("a",v,[n[9]||(n[9]=a("接收的参数信息和返回的参数信息")),e(o)])]),s("li",null,[s("a",b,[n[10]||(n[10]=a("有关opcode的说明")),e(o)])])]),n[17]||(n[17]=s("h2",{id:"将已写好的补充函数添加到apk",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#将已写好的补充函数添加到apk"},[s("span",null,"将已写好的补充函数添加到apk")])],-1)),s("p",null,[n[12]||(n[12]=a("使用MT管理器等工具编辑dex，添加压缩包中的smali，如果有重名则覆盖。")),n[13]||(n[13]=s("br",null,null,-1)),s("a",h,[n[11]||(n[11]=a("点击下载文件")),e(o)])]),n[18]||(n[18]=l(`<h2 id="探索过程" tabindex="-1"><a class="header-anchor" href="#探索过程"><span>探索过程</span></a></h2><p>本节为自用，主要记录实现java代码的过程。</p><p>有关资料，可以在前言中寻找。</p><h3 id="处理函数的函数层注解" tabindex="-1"><a class="header-anchor" href="#处理函数的函数层注解"><span>处理函数的函数层注解</span></a></h3><p>在前言中提到了注解，一个完整的函数长这样</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestHandler</span><span class="token punctuation">(</span>opcode <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OpenFont</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@ParamName</span><span class="token punctuation">(</span><span class="token string">&quot;nameLength&quot;</span><span class="token punctuation">)</span> <span class="token keyword">short</span> s<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">short</span> s2<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@ParamLength</span><span class="token punctuation">(</span><span class="token string">&quot;nameLength&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;cursor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notImplementedYet</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;OpenFont supports only font=&#39;cursor&#39;, but got &#39;%s&#39;.&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@ReuqestHandler作用在函数上，表明该函数对应的opcode。之前想尝试解决鼠标偏移的时候误打误撞研究过这里，发现原来是可以通过注解 在RootXRequestHandlerConfigurer类中配置这些函数。 相关代码如下。可以看到，先获取对象的全部方法，然后尝试获取方法的注解，如果有RequestHandler注解，则将此方法添加到数组中。之后就可以随时从数组中获取。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDispatcher</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objArr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> objArr<span class="token punctuation">)</span> </span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token class-name">RequestHandler</span> requestHandler <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </span>
<span class="line">                <span class="token function">processOneHandler</span><span class="token punctuation">(</span>requestHandler<span class="token punctuation">.</span><span class="token function">opcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">installRequestHandler</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">OpcodeHandler</span> opcodeHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>opcodeHandlers<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">OpcodeHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> opcodeHandlerArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpcodeHandler</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>opcodeHandlers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> opcodeHandlerArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>opcodeHandlers<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>opcodeHandlers <span class="token operator">=</span> opcodeHandlerArr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>opcodeHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;A handler for the opcode %d is already registered.&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>opcodeHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> opcodeHandler<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理函数的参数层注解" tabindex="-1"><a class="header-anchor" href="#处理函数的参数层注解"><span>处理函数的参数层注解</span></a></h3><p>然后ex的xserver应该是用socket通信，所以接收到Request的时候，会拿到一个字节数组。在AnnotationDrivenOpcodeHandler类中，通过method.invoke调用对应的处理方法。主要内容如下。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span> <span class="token comment">// com.eltechs.axs.proto.input.OpcodeHandler</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">XClient</span> xClient<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">byte</span> minorOpCode<span class="token punctuation">,</span> <span class="token class-name">XRequest</span> xRequest<span class="token punctuation">,</span> <span class="token class-name">XResponse</span> xResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">XProtocolError</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">LocksManager<span class="token punctuation">.</span>XLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xServer<span class="token punctuation">.</span><span class="token function">getLocksManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>locks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerObject<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestParser<span class="token punctuation">.</span><span class="token function">getRequestHandlerParameters</span><span class="token punctuation">(</span>xClient<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xServer<span class="token punctuation">,</span> xRequest<span class="token punctuation">,</span> xResponse<span class="token punctuation">,</span> length<span class="token punctuation">,</span> minorOpCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        lock<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中XClient，XResponse如果在处理方法中声明为参数就传进去，没有就不传。然后获取处理方法参数的注解，如果该参数带<code>@RequestParam</code>，就从字节数组中读取一些字节作为该参数的值。如果全部处理完带该注解的参数，字节数组还有剩余，则会抛出异常，所以要确定好参数的个数和类型。</p><p>有关处理方法的参数注解，<code>@ParamName(&quot;nameLength&quot;)</code>和<code>@ParamLength(&quot;nameLength&quot;)</code>组合使用，可以读取指定长度的字符作为字符串，如下示例。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">@RequestParam @ParamName(&quot;nameLength&quot;) short s,</span>
<span class="line">@ParamLength(&quot;nameLength&quot;) @RequestParam String str</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个<code>@ParamWidth(数字)</code>,数字只能是1或2或4，用于读取指定长度的字节作为一个基础类型的参数值。</p><h3 id="处理函数的返回值" tabindex="-1"><a class="header-anchor" href="#处理函数的返回值"><span>处理函数的返回值</span></a></h3><p>在参考规范中，可以看到很多处理函数都是带返回值的，但是ex中的函数没有直接return返回，而是通过XResponse类，写入socket来返回值。</p><p>再看两个简单的例子</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestHandler</span><span class="token punctuation">(</span>opcode <span class="token operator">=</span> <span class="token class-name">GetPointerControl</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">GetPointerControl</span><span class="token punctuation">(</span><span class="token class-name">XResponse</span> xResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    xResponse<span class="token punctuation">.</span><span class="token function">sendSimpleSuccessReply</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XResponse<span class="token punctuation">.</span>ResponseDataWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// from class: com.eltechs.axs.requestHandlers.core.PointerRelatedRequests.2</span></span>
<span class="line">        <span class="token annotation punctuation">@Override</span> <span class="token comment">// com.eltechs.axs.xconnectors.BufferFiller</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> byteBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Locks</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;INPUT_DEVICES&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@RequestHandler</span><span class="token punctuation">(</span>opcode <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">QueryKeymap</span><span class="token punctuation">(</span><span class="token class-name">XResponse</span> xResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    xResponse<span class="token punctuation">.</span><span class="token function">sendSimpleSuccessReply</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我没仔细研究过写入格式是啥，反正大概就是将返回值写入字节数组。</p><p>注意如果该处理函数需要有返回值，而没调用xResponse发送一个socket的话，那么请求方就会一直等着。测试发现，比如在初始化时有一个返回值没返回，ex就会卡在启动环境后的加载中那个界面。</p><h3 id="自己编写处理函数" tabindex="-1"><a class="header-anchor" href="#自己编写处理函数"><span>自己编写处理函数</span></a></h3><p>对于wine8.6 缺的是ListFonts。添加函数：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestHandler</span><span class="token punctuation">(</span>opcode <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ListFonts</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">XClient</span> xClient<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">XResponse</span> xResponse <span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@Unsigned</span> <span class="token annotation punctuation">@Width</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">int</span> maxNames<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@ParamName</span><span class="token punctuation">(</span><span class="token string">&quot;patternLength&quot;</span><span class="token punctuation">)</span> <span class="token keyword">short</span> length<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@ParamLength</span><span class="token punctuation">(</span><span class="token string">&quot;patternLength&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> pattern</span>
<span class="line">        <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;TAG&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;看看要求的pattern是啥？&quot;</span><span class="token operator">+</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fontLists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    xResponse<span class="token punctuation">.</span><span class="token function">sendSimpleSuccessReply</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XResponse<span class="token punctuation">.</span>ResponseDataWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// from class: com.eltechs.axs.requestHandlers.core.AtomManipulationRequests.1</span></span>
<span class="line">        <span class="token annotation punctuation">@Override</span> <span class="token comment">// com.eltechs.axs.xconnectors.BufferFiller</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> byteBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于wine5.0以上staging，缺的是GetPointerMapping。添加函数</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestHandler</span><span class="token punctuation">(</span>opcode <span class="token operator">=</span> <span class="token class-name">GetPointerMapping</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">GetPointerMapping</span><span class="token punctuation">(</span><span class="token class-name">XResponse</span> xResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    xResponse<span class="token punctuation">.</span><span class="token function">sendSimpleSuccessReply</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">XResponse<span class="token punctuation">.</span>ResponseDataWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token annotation punctuation">@Override</span></span>
<span class="line">                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> byteBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    byteBuffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说一点，如果写的处理函数参数格式不正确，是会直接报错的，再加上我现在ex的dex基本反编译完了，这块调试很方便，所以可以确定参数是没问题的。<br><s>但是返回值没有研究过传哪去了，也不知道怎么调试，所以不敢保证自己写的函数返回值正确。从结果来看，添加函数之后不会报错，不会闪退，可以正常进入环境。</s> 写这篇博客的时候搜了一下，找到返回值结构了。。。</p><h4 id="分析请求参数" tabindex="-1"><a class="header-anchor" href="#分析请求参数"><span>分析请求参数</span></a></h4><p>如果想查看request传入的字节数组具体内容的话，可以在<code>RootXRequestHandler.handleNormalRequest()</code>打log。数组最开头两位分别是majorOpcode和minorOpcode。拿个ListFonts传入的字节数组为例 <code>[49, 0, 4, 0, 1, 0, 5, 0, 102, 105, 120, 101, 100, 0, 0, 0]</code></p><p>在<code>https://cgit.freedesktop.org/xorg/proto/xproto/tree/Xproto.h</code>中查找，可找到ListFonts的请求数据格式和返回数据格式。（在写这篇博客之前，也就是写函数的时候我还不知道在这里能查数据格式orz）</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">//请求数据格式</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    CARD8 reqType<span class="token punctuation">;</span></span>
<span class="line">    BYTE pad<span class="token punctuation">;</span></span>
<span class="line">    CARD16 length B16<span class="token punctuation">;</span></span>
<span class="line">    CARD16 maxNames B16<span class="token punctuation">;</span></span>
<span class="line">    CARD16 nbytes B16<span class="token punctuation">;</span>  <span class="token comment">/* followed immediately by string bytes */</span></span>
<span class="line"><span class="token punctuation">}</span> xListFontsReq<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//返回数据格式</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    BYTE type<span class="token punctuation">;</span>  <span class="token comment">/* X_Reply */</span></span>
<span class="line">    BYTE pad1<span class="token punctuation">;</span></span>
<span class="line">    CARD16 sequenceNumber B16<span class="token punctuation">;</span></span>
<span class="line">    CARD32 length B32<span class="token punctuation">;</span></span>
<span class="line">    CARD16 nFonts B16<span class="token punctuation">;</span></span>
<span class="line">    CARD16 pad2 B16<span class="token punctuation">;</span></span>
<span class="line">    CARD32 pad3 B32<span class="token punctuation">;</span></span>
<span class="line">    CARD32 pad4 B32<span class="token punctuation">;</span></span>
<span class="line">    CARD32 pad5 B32<span class="token punctuation">;</span></span>
<span class="line">    CARD32 pad6 B32<span class="token punctuation">;</span></span>
<span class="line">    CARD32 pad7 B32<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> xListFontsReply<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31)),s("p",null,[s("a",g,[n[14]||(n[14]=a("Xlib页面")),e(o)]),n[15]||(n[15]=a("的函数介绍"))]),n[19]||(n[19]=l(`<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">char **XListFonts(Display *display, char *pattern, int maxnames, int *actual_count_return);</span>
<span class="line"></span>
<span class="line">display         Specifies the connection to the X server.</span>
<span class="line">pattern         Specifies the null-terminated pattern string that can contain wildcard characters.</span>
<span class="line">maxnames        Specifies the maximum number of names to be returned.</span>
<span class="line">actual_count_return     Returns the actual number of font names.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看字节数组，49是majorcode，0是minorcode，接下来的4跟剩余字节个数有关，设它为n</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">int n = 4;</span>
<span class="line">int i = (n != 0) ? 4 : 8;</span>
<span class="line">int remaning = (n * 4) - i;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算出remaning=12，正好是剩下的字节个数。所以这个4大概对应结构体中的<code>length</code>？在往下，小端序读取两个字节 = 01，对应结构体中的<code>maxNames</code>，即最多可返回的字符串个数。再读两个字节 = 05，对应结构体的<code>nbytes</code>，即应往下读取五个字节作为接下来的字符串参数<code>pattern</code>，手动将ascii转字符，可得字符串为<code>fixed</code>。完毕。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>exgear自制的xserver，在<code>com.eltechs.axs.requestHandlers</code>包下实现了大部分的X11核心协议，和一小部分伪装的扩展协议，用于处理request，但是并不全。</li><li>处理协议的函数，接收和发送数据都是利用socket，也就是需要从接收字节转为参数，再把返回值转为字节发送。通过在函数头加上注解@RequestHandler，将处理函数与对应的Xlib操作关联起来。</li><li>某些没有实现的核心协议，如果用到了会抛出严重异常，xserver会直接关闭，扩展协议的话基础使用可以不用到，但是3d渲染很多都会需要，所以exagear里用3d渲染挺麻烦的，尤其是硬件渲染。</li><li>补齐处理函数，可以先在x86-stderr.txt中查一下majorcode和函数名，然后在Xlib界面查找对应的函数介绍（https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html ），根据请求和返回数据格式（ https://cgit.freedesktop.org/xorg/proto/xproto/tree/Xproto.h ）编写函数，通过@RequestParam注明要接收的参数，通过xResponse将返回值写入字节数组中。</li></ul>`,6))])}const w=i(k,[["render",f],["__file","index.html.vue"]]),R=JSON.parse('{"path":"/blogs/2023/spring/exagearX11CoreProtocol/","title":"完善Exagear XServer的X11核心协议, 解决wine8.6和wine5.0+ staging无法在ex的xserver上使用的问题","lang":"zh-CN","frontmatter":{"date":"2023-4-20 10:35:24","title":"完善Exagear XServer的X11核心协议, 解决wine8.6和wine5.0+ staging无法在ex的xserver上使用的问题","categories":["exagear","技术"],"tags":["XServer","exagear","Core X11 Protocol"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"将已写好的补充函数添加到apk","slug":"将已写好的补充函数添加到apk","link":"#将已写好的补充函数添加到apk","children":[]},{"level":2,"title":"探索过程","slug":"探索过程","link":"#探索过程","children":[{"level":3,"title":"处理函数的函数层注解","slug":"处理函数的函数层注解","link":"#处理函数的函数层注解","children":[]},{"level":3,"title":"处理函数的参数层注解","slug":"处理函数的参数层注解","link":"#处理函数的参数层注解","children":[]},{"level":3,"title":"处理函数的返回值","slug":"处理函数的返回值","link":"#处理函数的返回值","children":[]},{"level":3,"title":"自己编写处理函数","slug":"自己编写处理函数","link":"#自己编写处理函数","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1681970570000,"updatedTime":1681970570000,"contributors":[{"name":"ewt45","email":"79033456+ewt45@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/2023/spring/exagearX11CoreProtocol/index.md"}');export{w as comp,R as data};
