import{_ as u,c,a,d as o,b as t,f as l,e as s,r as i,o as r}from"./app-lSJJfXGm.js";const d="/assets/1-CUELMVU4.png",k="/assets/2-B0l5mEam.png",m={},g={class:"table-of-contents"},v={href:"https://developer.android.com/studio/projects/android-library?hl=zh-cn#groovy",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.android.com/build/manage-manifests?hl=zh-cn#groovy",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/ewt45/termux-x11-fork/tree/build-aar-to-merge-to-tapp",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.android.com/guide/topics/manifest/application-element?hl=zh-cn#extractNativeLibs",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/qq_40533422/article/details/113446897",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/ewt45/termux-app-fork/tree/built-in-tx11",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.android.com/build/manage-manifests",target:"_blank",rel:"noopener noreferrer"},A={href:"https://developer.android.com/build/optimize-your-build?hl=zh-cn#use-non-transitive-r-classes",target:"_blank",rel:"noopener noreferrer"},E={href:"https://stackoverflow.com/a/2850597/18791788",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.android.google.cn/guide/topics/manifest/activity-element?hl=zh-cn#lmode",target:"_blank",rel:"noopener noreferrer"},N={href:"https://blog.csdn.net/nihaomabmt/article/details/86490090",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/ewt45/termux-packages-fork/tree/termux-x11-modified",target:"_blank",rel:"noopener noreferrer"},R={href:"https://developer.android.com/build/manage-manifests?hl=zh-cn#node_markers",target:"_blank",rel:"noopener noreferrer"},w={href:"https://developer.android.com/guide/topics/manifest/activity-element#lmode",target:"_blank",rel:"noopener noreferrer"};function C(j,n){const e=i("router-link"),p=i("ExternalLinkIcon");return r(),c("div",null,[a("nav",g,[a("ul",null,[a("li",null,[t(e,{to:"#前言"},{default:l(()=>n[0]||(n[0]=[s("前言")])),_:1})]),a("li",null,[t(e,{to:"#termux-x11编译为依赖库"},{default:l(()=>n[1]||(n[1]=[s("termux-x11编译为依赖库")])),_:1})]),a("li",null,[t(e,{to:"#termux-app-导入tx11依赖"},{default:l(()=>n[2]||(n[2]=[s("termux-app 导入tx11依赖")])),_:1})]),a("li",null,[t(e,{to:"#悬浮球"},{default:l(()=>n[3]||(n[3]=[s("悬浮球")])),_:1})]),a("li",null,[t(e,{to:"#打包loader为deb-bootstraps"},{default:l(()=>n[4]||(n[4]=[s("打包loader为deb/bootstraps")])),_:1}),a("ul",null,[a("li",null,[t(e,{to:"#构建deb"},{default:l(()=>n[5]||(n[5]=[s("构建deb")])),_:1})]),a("li",null,[t(e,{to:"#bootstraps"},{default:l(()=>n[6]||(n[6]=[s("bootstraps")])),_:1})])])]),a("li",null,[t(e,{to:"#一些遇到的问题和解决方法"},{default:l(()=>n[7]||(n[7]=[s("一些遇到的问题和解决方法")])),_:1}),a("ul",null,[a("li",null,[t(e,{to:"#清单合并-相关问题"},{default:l(()=>n[8]||(n[8]=[s("清单合并 相关问题")])),_:1})]),a("li",null,[t(e,{to:"#run-app-后代码不更新"},{default:l(()=>n[9]||(n[9]=[s("Run app 后代码不更新")])),_:1})]),a("li",null,[t(e,{to:"#代码优化后的反射获取"},{default:l(()=>n[10]||(n[10]=[s("代码优化后的反射获取")])),_:1})]),a("li",null,[t(e,{to:"#其他"},{default:l(()=>n[11]||(n[11]=[s("其他")])),_:1})])])]),a("li",null,[t(e,{to:"#之后更新tx11时要注意"},{default:l(()=>n[12]||(n[12]=[s("之后更新tx11时要注意")])),_:1})]),a("li",null,[t(e,{to:"#待解决-待实现"},{default:l(()=>n[13]||(n[13]=[s("待解决/待实现")])),_:1})])])]),n[77]||(n[77]=o('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>termux-app（以下可能简称tapp）: 终端模拟器，提供一个类似linux的环境。</p><p>termux-x11（以下可能简称tx11）: linux应用如果带图形界面，则需要借助x11显示出来。</p><p>运行gui应用是很常见的需求，所以不如直接将二者合为一个。</p><hr><p><strong>主要思路</strong>：</p><ol><li>将termux-x11编译为aar依赖库。</li><li>temrux-app中导入tx11依赖库，并处理冲突</li><li>tapp中，添加一个悬浮球显示，用于切换tx11和tapp.</li></ol><p>相比于tapp,tx11的代码量明显要小的多，所以考虑将tx11移植到tapp内，而不是tapp移植到tx11内。对tx11做最小改动后，打包成单个依赖库文件方便使用，然后再对tapp添加一些代码，实现一个悬浮球，能够切换到tx11的activity。</p><p>另外，由于termux-x11需要在tapp中通过包管理器安装一个启动脚本来启动xserver. 所以这个启动脚本也需要做对应更改。</p><p><strong>参考</strong>：</p>',10)),a("ul",null,[a("li",null,[a("a",v,[n[14]||(n[14]=s("将应用模块转换为库模块")),t(p)])]),a("li",null,[a("a",b,[n[15]||(n[15]=s("AndroidManifest的合并规则")),t(p)])])]),n[78]||(n[78]=o('<p><strong>预计效果</strong>：</p><ul><li>用户只需安装一个apk，此apk包含了tapp和tx11, bootstraps中应包含termux-x11-nightly包。</li><li>用户打开app后，无需做任何额外操作，即可正常使用termux-x11，并从终端和图形二者的activity之间切换。</li></ul><hr><p><strong>成品测试</strong>：</p><p>https://github.com/ewt45/termux-app-fork/releases/tag/20240308</p><p>*修改后的termux-x11-nightly包存于bootstraps中，只有初次安装后才会被解压，所以如果在原版app上覆盖安装 则无法生效。</p><h2 id="termux-x11编译为依赖库" tabindex="-1"><a class="header-anchor" href="#termux-x11编译为依赖库"><span>termux-x11编译为依赖库</span></a></h2><p>修改源代码.</p>',8)),a("p",null,[n[17]||(n[17]=s("全部代码更改可以在github查看: ")),a("a",x,[n[16]||(n[16]=s("termux-x11-fork")),t(p)]),n[18]||(n[18]=s(". 以下为文字描述。"))]),n[79]||(n[79]=a("p",null,"步骤：",-1)),a("ol",null,[n[29]||(n[29]=o("<li><p>app模块build.gradle</p><ul><li>顶部 <code>&#39;com.android.application&#39;</code>改为<code>&#39;com.android.library&#39;</code> 。将应用项目改为库项目。</li><li>删除 <code>android.defaultConfig.applicationId</code> 。这个只有应用项目才有。</li><li><code>android.buildTypes.debug.postprocessing</code> 4个都改为false。 <ul><li><code>removeUnusedResources</code> 为true的时候会报错 Resource shrinker cannot be used for libraries.</li><li><code>optimizeCode</code> 和 <code>removeUnusedCode</code>为true的时候，会导致tapp引入aar依赖后构建时报错 java.lang.NullPointerException: Cannot invoke &quot;com.android.tools.r8.graph.e0.J()&quot; because the return value of &quot;com.android.tools.r8.graph.L.b()&quot; is null</li></ul></li><li>(可选) <code>android.split.abi</code>中，<code>inlcude</code>只留下<code>arm64-v8a</code></li></ul></li>",1)),a("li",null,[n[23]||(n[23]=a("p",null,[s("CmdEntryPoint. 最下面的static块中，"),a("code",null,"System.load"),s("加载so库时会报错找不到文件"),a("code",null,'java.lang.UnsatisfiedLinkError: dlopen failed: library "/data/app/com.termux-XAoy44sazqImUbH9oFHPNQ==/base.apk!/lib/arm64-v8a/libXlorie.so" not found'),s("，")],-1)),a("ul",null,[a("li",null,[n[20]||(n[20]=s("实际上是有的。猜测是tx11的so不压缩，所以可以直接从apk中加载。 参考")),a("a",f,[n[19]||(n[19]=s("extractNativeLibs/useLegacyPackaging")),t(p)]),n[21]||(n[21]=s("。但二者都改成false之后也不行。改成loadLibrary，java中调用Cmd类变正常，但终端调用termux-x11还是报错。"))]),n[22]||(n[22]=o(`<li>只能改成获取解压后的文件了。在<code>System.load(libPath);</code> 前添加四行，修改libPath。<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span></span>PackageInfo</span> targetInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token punctuation">.</span><span class="token constant">SDK_INT</span> <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">?</span></span>
<span class="line">	<span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span>ActivityThread</span><span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span><span class="token string">&quot;com.termux&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span></span>PackageManager</span><span class="token punctuation">.</span><span class="token constant">GET_SIGNATURES</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span></span>
<span class="line">	<span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span>ActivityThread</span><span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span><span class="token string">&quot;com.termux&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span></span>PackageManager</span><span class="token punctuation">.</span><span class="token constant">GET_SIGNATURES</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">libPath <span class="token operator">=</span> targetInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>nativeLibraryDir <span class="token operator">+</span> <span class="token string">&quot;/libXlorie.so&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))])]),a("li",null,[n[28]||(n[28]=a("p",null,"LoriePreferences.java",-1)),a("ul",null,[a("li",null,[n[25]||(n[25]=s("由于库项目（应用项目不受影响）的")),a("a",y,[n[24]||(n[24]=s("BuildConfig.VERSION_NAME已经被移除了")),t(p)]),n[26]||(n[26]=o(`，所以相关代码改为从PackageManager获取<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//with(&quot;version&quot;, p -&gt; p.setSummary(BuildConfig.VERSION_NAME));</span></span>
<span class="line"><span class="token comment">// 库项目的BuildConfig.VERSION_NAME已经被移除了</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">String</span> versionName <span class="token operator">=</span> <span class="token function">requireContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span><span class="token function">requireContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>versionName<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> p <span class="token operator">-&gt;</span> p<span class="token punctuation">.</span><span class="token function">setSummary</span><span class="token punctuation">(</span>versionName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span></span>PackageManager<span class="token punctuation">.</span>NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))]),n[27]||(n[27]=o(`<li>由于gradle中代码优化相关的设置被关闭了，导致反射获取protect方法失败（优化后的smali中protect会变成public，原理未知）。搜索<code>&quot;onSetInitialValue&quot;</code>，删掉此行并添加<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">onSetInitialValue <span class="token operator">=</span> <span class="token class-name">Preference</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;onSetInitialValue&quot;</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">onSetInitialValue<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))])]),n[30]||(n[30]=o(`<li><p>创建/res/values/public.xml，声明公开资源。没有public标签时默认导出全部资源为公共资源。所以即使没有任何公开资源也建议创建一个空的xml，将全部资源设置为私有。这里导出图标和主题。</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>public</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ic_x11_icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>drawable<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>public</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>AppTheme<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改shell-loader模块的Loader类，将读取和连接的包名改为termux的。</p><ul><li>开头添加两行。然后下面<code>BuildConfig.APPLICATION_ID</code>改为<code>pkgName</code><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//将CmdEntryPoint里连接的应用改为termux</span></span>
<span class="line"><span class="token class-name">String</span> pkgName <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>system<span class="token punctuation">.</span></span>Os</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;TERMUX_APP__PACKAGE_NAME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//将要连接的应用改为termux</span></span>
<span class="line"><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>system<span class="token punctuation">.</span></span>Os</span><span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token string">&quot;TERMUX_X11_OVERRIDE_PACKAGE&quot;</span><span class="token punctuation">,</span> pkgName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//将两个BuildConfig.APPLICATION_ID改为termux</span></span>
<span class="line"><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span></span>PackageInfo</span> targetInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Build</span><span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token punctuation">.</span><span class="token constant">SDK_INT</span> <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">?</span></span>
<span class="line">	<span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span>ActivityThread</span><span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span></span>PackageManager</span><span class="token punctuation">.</span><span class="token constant">GET_SIGNATURES</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span></span>
<span class="line">	<span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span>ActivityThread</span><span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span></span>PackageManager</span><span class="token punctuation">.</span><span class="token constant">GET_SIGNATURES</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>注释掉签名校验。下面<code>assert targetInfo.signatures.length == 1</code> 那一行注释掉。</li></ul></li><li><p>(可选) shell-loader的gradle，包名那一行<code>android.defaultConfig.buildConfigField &quot;String&quot;, &quot;APPLICATION_ID&quot;, </code> 改为termux的。但因为Loader.java里已经不用这个了所以不改也无所谓。</p></li><li><p>还有好多硬编码的<code>com.termux.x11</code>包名要改成<code>com.termux</code>的。</p><ul><li>命令行修改tx11设置的 termux-x11-preference这个脚本里COMMAND中的包名，以及LoriePreference.java里要改两处说明字符串和三处intent.setPackage的包名。</li><li>KeyInterceptor.java 中有两处包名。</li></ul></li><li><p>构建aar。</p><ul><li>gradle sync</li><li>点击 <code>顶端工具栏</code> - <code>Build</code> -<code> Make module &#39;termux-x11.app&#39;</code>（好像有时候不会更新生成文件，需要点<code>Make Project</code>）</li><li>构建完成后，aar文件出现在 <code>模块目录/build/outputs/aar</code>文件夹内。</li></ul></li><li><p>构建loader.apk</p><ul><li>选中shell-loader模块中的一个文件。然后Make module。会在<code>outputs/apk/debug</code>文件夹中发现apk。</li><li>手动测试：重名为loader.apk，放到手机/data/data/com.termux/files/usr/libexec/termux-x11/loader.apk, 权限改为<code>-w</code> 或<code>400</code> 即可生效。（手动放很麻烦，后续改为通过deb安装）</li></ul></li>`,6))]),n[80]||(n[80]=a("h2",{id:"termux-app-导入tx11依赖",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#termux-app-导入tx11依赖"},[a("span",null,"termux-app 导入tx11依赖")])],-1)),n[81]||(n[81]=a("p",null,"修改源代码.",-1)),a("p",null,[n[32]||(n[32]=s("全部代码更改可以在github查看: ")),a("a",q,[n[31]||(n[31]=s("termux-app-fork")),t(p)]),n[33]||(n[33]=s(". 以下为文字描述。"))]),n[82]||(n[82]=a("p",null,"步骤:",-1)),a("ol",null,[n[52]||(n[52]=o("<li><p>app模块的build.gradle中</p><ul><li>引入tx11的aar。根节点的 <code>dependencies</code> 添加一行<code>implementation files(&#39;app-debug.aar&#39;)</code>。然后将<code>app-debug.aar</code>放入app模块文件夹中。</li><li>(可选) 架构只留下arm64</li></ul></li><li><p>(25.02.03) SDK相关。</p><ul><li>jdk改为17（21目前不支持）。在 <code>File - Settings - Build,... - Build Tools - Gradle</code> 中修改。</li><li>agp改为8.x。构建时有个脱糖的任务 tx11的aar会报错。需要将android gradle plugin 升到8.x . 用 <code>Tools - AGP升级助手</code> 先升到了7,然后要手动删除三个模块里的<code>apply plugin: &#39;maven-publish&#39;</code> 以及对应的<code>publishing</code>块和<code>task sourceJar</code>。然后再升到8.8.0（和termux-x11同步了）</li></ul></li>",2)),a("li",null,[a("p",null,[n[35]||(n[35]=s("调整清单文件。引入tx11的aar后，其清单会和tapp的清单合并，需要解决冲突。")),a("a",h,[n[34]||(n[34]=s("参考文档")),t(p)]),n[36]||(n[36]=s(" 。基本思路：在tapp的清单中再次定义tx11的activity标签，然后添加或删除属性/子标签。"))]),n[37]||(n[37]=o(`<ul><li>添加MainActivity（Xrctivity也加了但是没测试）。 <ul><li>手动指定为原来的主题。（原tx11的主题只在application那全局指定的，现在被tapp的application的theme覆盖了，红色按钮太晃眼睛）</li><li>同理添加label，以便在最近任务中区分。</li><li>添加<code>tools:node=&quot;remove&quot;</code>, 移除<code>&lt;intent-filter&gt;</code> 的 <code>LAUNCHER</code>。否则桌面上会出现x11的图标。（注意另一个action虽然不改也要写上，否则intent-filter会匹配失败。具体可以看<strong>清单合并 相关问题</strong>这一章节）</li></ul><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.termux.x11.MainActivity<span class="token punctuation">&quot;</span></span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Termux:X11<span class="token punctuation">&quot;</span></span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@style/AppTheme<span class="token punctuation">&quot;</span></span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.action.MAIN<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.LAUNCHER<span class="token punctuation">&quot;</span></span></span>
<span class="line">			<span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remove<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>dex的keep_processes_alive 添加<code>tool:replace</code> 保留 true（tx11是false）<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.samsung.android.multidisplay.keep_process_alive<span class="token punctuation">&quot;</span></span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">tools:</span>replace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android:value<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>application标签添加<code>tool:replace</code>，以tapp的优先<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span></span>
<span class="line">	<span class="token attr-name">...</span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">tools:</span>replace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android:label,android:supportsRtl,android:theme<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1))]),n[53]||(n[53]=o("<li><p>项目的<code>gradle.properties</code></p><ul><li>最新termux已支持jdk17无需修改。 <s>在<code>org.gradle.jvmargs</code> 的参数结尾，加上空格和<code> --add-opens java.base/java.io=ALL-UNNAMED</code>。不加这个，编译会报错<code>Unable to make field private final java.lang.String java.io.File.path accessible: module java.base does not &quot;opens java.io&quot; to unnamed module @74429f70 </code></s></li><li>minSdk改为26 <code>minSdkVersion=26</code></li></ul></li><li><p><strong>使用本地bootstrap</strong></p><ul><li>app模块的build.gradle，下载bootstraps的那个函数调用注释掉：<code>variant.javaCompileProvider.get().dependsOn(downloadBootstraps)</code>，然后手动放好bootstrap。位置：<code>src/main/cpp/bootstrap-aarch64.zip</code>。 <ul><li>现在已修复。<s>版本用2023.11.26年的可以，最新的报错<code>termux-bootstrap-second-stage.sh</code>权限被拒绝。貌似最新的bootstrap要用0.188.1, master分支的代码落后于0.188.1的。</s></li></ul></li><li>或者把下载链接换成自己的，并去掉多余架构和文件校验。</li></ul></li>",2)),a("li",null,[n[51]||(n[51]=a("p",null,"底部按键冲突。",-1)),a("ul",null,[n[50]||(n[50]=a("li",null,[a("code",null,"termux-shared"),s("模块 "),a("code",null,"com.termux.shared.termux.extrakeys"),s(" 包名改为"),a("code",null,"extrakeys_app"),s("，因为tx11对此包名下的类做了修改，与tapp的同名类不再兼容。")],-1)),a("li",null,[n[39]||(n[39]=a("code",null,"app",-1)),n[40]||(n[40]=s("模块 res中")),n[41]||(n[41]=a("code",null,"view_terminal_toolbar_extra_keys.xml",-1)),n[42]||(n[42]=s("改为")),n[43]||(n[43]=a("code",null,"view_terminal_toolbar_extra_keys_app.xml",-1)),n[44]||(n[44]=s(". ")),n[45]||(n[45]=a("code",null,"view_terminal_toolbar_text_input.xml",-1)),n[46]||(n[46]=s("改为")),n[47]||(n[47]=a("code",null,"view_terminal_toolbar_text_input_app.xml",-1)),n[48]||(n[48]=s("。x11中创建ExtraKeysView时用R.layout，由于xml名与tapp相同，导致获取到的是tapp的那个布局。（另外也可参考")),a("a",A,[n[38]||(n[38]=s("非传递R类")),t(p)]),n[49]||(n[49]=s("）"))])])])]),n[83]||(n[83]=o('<h2 id="悬浮球" tabindex="-1"><a class="header-anchor" href="#悬浮球"><span>悬浮球</span></a></h2><p>以下是一些实现悬浮球功能时的具体细节，有些内容可能已经过时。</p><p><strong>显示</strong></p><p>使用无需申请悬浮窗权限的类型<code>TYPE_APPLICATION_PANEL</code>。无法显示到其他应用上。必须要指定一个windowToken（<code>params.token = activity.getWindow().getDecorView().getWindowToken();</code>）</p><p>因此，使用这种类型的时候，一旦切换了activity就会丢失。需要监听activity生命周期的变化。</p><p>使用<code>application.registerActivityLifecycleCallbacks</code> 在<code>onActivityResumed</code> 判断。</p><ul><li>如果进入app或x11的活动，则显示。顺便保存acitivty对象。</li><li>悬浮窗类型选择TYPE_APPLICATION_PANEL</li></ul><p>在onResmue中获取的token为null，所以postDelay延迟1秒再获取。 此token貌似只能从decorView获取，windowManager.LayoutParams获取的不行。</p><p>然后在<code>onActivityPaused</code>中</p><ul><li>如果是app或x11的活动，则清空先前保存的activity对象。然后移除悬浮窗。</li></ul><p>注入代码时机就在<code>TermuxApplication onCreate</code>的时候了。</p><hr><p><strong>窗口泄漏</strong></p><p>之前切换活动的时候，logcat会报错<code>android.view.WindowLeaked: Activity com.termux.app.TermuxActivity has leaked window android.widget.FrameLayout{50b9d55 V.E...... .......D 0,0-176,96} that was originally added here</code></p>',14)),a("p",null,[n[55]||(n[55]=s("窗口泄露的原因：")),a("a",E,[n[54]||(n[54]=s("在activity退出之后仍然没有移除窗口")),t(p)])]),n[84]||(n[84]=a("ol",null,[a("li",null,[s("移除窗口时机不对。有时候活动退出仍未调用移除窗口代码。 "),a("ul",null,[a("li",null,"解决办法：在onPause回调中移除窗口。")])]),a("li",null,[s("一秒内切了两次活动，导致一秒后将窗口添加到了已经退出的活动上。 "),a("ul",null,[a("li",null,"解决办法：在onResume回调中记录当前显示的活动。一秒后将最新显示的活动与一秒前显示的活动对比，若不等则跳过添加窗口。")])])],-1)),n[85]||(n[85]=a("hr",null,null,-1)),n[86]||(n[86]=a("p",null,[a("strong",null,"活动，任务，堆栈")],-1)),n[87]||(n[87]=a("p",null,"还有一个要考虑的，就是切一次x11活动后，终端内输入exit，app活动结束，不是退到桌面而是切回x11活动。这个怎么搞呢",-1)),a("ul",null,[a("li",null,[n[58]||(n[58]=s("参考: ")),a("a",P,[n[56]||(n[56]=s("launchmode的官方文档")),t(p)]),a("a",N,[n[57]||(n[57]=s("Android 的singleTask和singleInstance的一点思考")),t(p)])])]),n[88]||(n[88]=a("p",null,"好像是一个任务就是一个栈，可以包括多个活动。如果是singleTask的话，可以在多个任务中都有一个实例（应该是跟随启动它的那个活动所在的任务）。singleInstance是所有任务中只能有一个实例。",-1)),n[89]||(n[89]=a("p",null,[s("x11活动是singleInstance app活动是singleTask。也就是说x11的活动永远是单例，app活动可能会多例？ 试试清单文件中。x11的MainActivity去掉taskAffinity标签"),a("code",null,'tools:remove="android:taskAffinity"'),s("。然后app的TermuxActivity launchmode改为singleInstance")],-1)),n[90]||(n[90]=a("p",null,"算了先不试了。不如直接在x11切app的时候调用a.finish()结束x11活动",-1)),n[91]||(n[91]=a("p",null,"结束x11活动后可以了，exit退出app时不会再回到x11活动。",-1)),n[92]||(n[92]=a("h2",{id:"打包loader为deb-bootstraps",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#打包loader为deb-bootstraps"},[a("span",null,"打包loader为deb/bootstraps")])],-1)),a("p",null,[n[60]||(n[60]=s("全部代码更改可以在github查看: ")),a("a",I,[n[59]||(n[59]=s("termux-packages-fork")),t(p)]),n[61]||(n[61]=s(". 以下为文字描述。"))]),n[93]||(n[93]=o(`<h3 id="构建deb" tabindex="-1"><a class="header-anchor" href="#构建deb"><span>构建deb</span></a></h3><p>用termux-package的构建系统。找到<code>x11-packages/termux-x11-nightly/build.sh</code>，进行修改</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">TERMUX_PKG_VERSION</span><span class="token operator">=</span><span class="token number">99.00</span>.00</span>
<span class="line"><span class="token assign-left variable">TERMUX_PKG_REVISION</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"><span class="token assign-left variable">TERMUX_PKG_SRCURL</span><span class="token operator">=</span>https://github.com/ewt45/termux-x11-fork/archive/5157eeda05c66c4ab00def4e31e09150ecb87006.tar.gz</span>
<span class="line"><span class="token assign-left variable">TERMUX_PKG_SHA256</span><span class="token operator">=</span>50ac09363fcc74a1905a24a31588932c351a0dea83948ab3039f0128034d8506</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">#下面的下载链接</span></span>
<span class="line">	<span class="token builtin class-name">local</span> <span class="token assign-left variable">LOADER_URL</span><span class="token operator">=</span><span class="token string">&quot;https://github.com/ewt45/termux-x11-fork/releases/download/aar-250203/termux-x11-nightly-99.00.00-any.pkg.tar.xz&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在似乎loader.apk都是提前手动编译，package里直接下载预编译的apk了。所以传一个到自己仓库里。LOADER_URL对应的压缩包里的文件路径格式，参考原版tx11的就行。</p><p>本地编译太麻烦了，直接fork仓库，action里第一个，输入包名称即可构建。 输入 <code>termux-x11-nightly xkeyboard-config</code> （有个依赖）</p><p>生成deb之后，直接termux里apt或pkg安装就行了。但是手动安装deb也有点麻烦，最好直接添加到bootstraps里，这样用户安装app之后，修改过的termux-x11-nightly就自动存在了。</p><h3 id="bootstraps" tabindex="-1"><a class="header-anchor" href="#bootstraps"><span>bootstraps</span></a></h3><p>有两个构建bootstrap的脚本</p><ul><li>generate-bootstraps.sh：从apt仓库直接下载deb并解压。需要提供一个apt源。termux目前官方bootstrap构建都用的这个脚本。</li><li>build-bootstraps.sh：从本地源码开始编译出所需deb，再解压。由于是从源码编译，所以更灵活，可以手动指定包名，构建出给别的应用使用的bootstraps. 问题是这个脚本目前官方是不用的，所以年久失修，各种bug.</li></ul><p>从去年7月一直等到现在，<strong>build-bootstraps.sh依然没修复，凑活用吧</strong>（吐槽：termux维护者的效率真是令人捉急。一直“预计几天” “预计几周”，结果一拖就是好几个月，tapp的版本号，tapi的更新，包括这个脚本的修复都是。真不怪原创始人突然更新谷歌版本，要真按你们的计划，都要拖到下辈子去了）</p><ol><li><p>新建action。仿照generate-bootstrap的workflow 改成build-bootstrap的。主要执行代码： <code>./scripts/run-docker.sh env TERMUX_PACKAGE_MANAGER=apt ./scripts/build-bootstraps.sh --architectures aarch64 --add termux-x11-nightly,xkeyboard-config</code></p><p>注意和generate的不同， <code>TERMUX_PACKAGE_MANAGER</code> 需要手动设置一下，否则app打开解压之后执行sencond-stage的时候会找不到变量而出错。</p></li><li><p>修改build-bootstraps.sh</p><ul><li><p><code>PACKAGES+=(&quot;bzip2&quot;)</code> 改为 libbz2 。因为bzip2是libbz2的子包而非单独deb,所以搜索不到。参考issue #10462 和 #22268</p></li><li><p>去掉编译时依赖。build-bootstraps会把编译时依赖也打包进去，导致压缩包有100多M。<code>extract_debs()</code> 中，新声明真正需要的变量</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">local</span> <span class="token assign-left variable">real_needed_packages</span><span class="token operator">=</span><span class="token string">&quot;termux-x11-nightly xkeyboard-config x11-repo apt bash bzip2 ca-certificates command-not-found coreutils curl dash debianutils dialog diffutils dos2unix dpkg ed findutils gawk gpgv grep gzip inetutils less libandroid-glob libandroid-selinux libandroid-support libassuan libbz2 libc++ libcap-ng libcurl libevent libgcrypt libgmp libgnutls libgpg-error libiconv libidn2 liblz4 liblzma libmd libmpfr libnettle libnghttp2 libnghttp3 libnpth libsmartcols libssh2 libtirpc libunbound libunistring lsof nano ncurses net-tools openssl patch pcre2 procps psmisc readline resolv-conf sed tar termux-am-socket termux-am termux-exec termux-keyring termux-licenses termux-tools unzip util-linux xxhash xz-utils zlib zstd &quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>前面几个是自己额外添加的，后面是原版termux初次安装后就有的(参考issue #23055). 注意如果中间要换行，第二行开头前不要有tab否则没有空格了导致匹配不上。反正就是别换行就行了</p><p>然后在下面遍历deb的for循环中 添加一个跳过条件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot; <span class="token variable">$real_needed_packages</span> &quot;</span> <span class="token operator">==</span> *<span class="token string">&quot; <span class="token variable">$current_package_name</span> &quot;</span>* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">	<span class="token builtin class-name">echo</span> <span class="token string">&quot;[*] Skipping build dependency package &#39;<span class="token variable">$deb</span>&#39;...&quot;</span></span>
<span class="line">	<span class="token builtin class-name">continue</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p>测试结果：</p><ul><li>如果添加了x11-repo,初次解压之后会执行它的postinit,执行<code>apt update</code> 更新索引。</li><li>不知为何，初次解压之后，更新索引之后还有一堆可更新的，还不是全部，版本号还没变化。似乎不更新也能用，不确定是bug还是可以忽略的问题。。</li><li>如果apk是从原版覆盖安装的话，也应该想办法检测一下。</li></ul><h2 id="一些遇到的问题和解决方法" tabindex="-1"><a class="header-anchor" href="#一些遇到的问题和解决方法"><span>一些遇到的问题和解决方法</span></a></h2><h3 id="清单合并-相关问题" tabindex="-1"><a class="header-anchor" href="#清单合并-相关问题"><span>清单合并 相关问题</span></a></h3><p>应该是MainActivity的那个intentfilter导致的。自己项目的manifest中，添加tx11的activity，注释删掉那个filter</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;activity android:name=&quot;com.termux.x11.MainActivity&quot;</span>
<span class="line">	android:exported=&quot;true&quot;&gt;</span>
<span class="line">	&lt;intent-filter&gt;</span>
<span class="line">		&lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span>
<span class="line">		&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;</span>
<span class="line">			tools:node=&quot;remove&quot; /&gt;</span>
<span class="line">	&lt;/intent-filter&gt;</span>
<span class="line">&lt;/activity&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原tx11的清单中，LAUNCHER位置如图</p><p><img src="`+d+'" alt="alt text"></p>',19)),a("p",null,[n[63]||(n[63]=s("根据 ")),a("a",R,[n[62]||(n[62]=s("教程")),t(p)]),n[64]||(n[64]=s(" ，可以在自己的清单里先声明一个LAUNCHER，再添上")),n[65]||(n[65]=a("code",null,'tools:node="remove"',-1)),n[66]||(n[66]=s(" 来表明最终要移除这个元素。"))]),n[94]||(n[94]=o(`<p>注意，由于它在一个intent-filter里，而intent-filter又可以不唯一，<strong>所以在自己的清单里，intent-filter其他内容必须要和tx11的一模一样。</strong></p><p>也就是说，虽然我们只关注LAUNCHER所在的这个category元素，但是自己清单中的intent-filter中仍然要写上action元素。否则自己写的intent-filter会被当做一个额外的元素来处理。</p><p>错误示范： 自己清单中只写了category</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.termux.x11.MainActivity<span class="token punctuation">&quot;</span></span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.LAUNCHER<span class="token punctuation">&quot;</span></span></span>
<span class="line">			<span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remove<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建后，自己清单中的intent-filter被当做一个额外的filter处理，变为空元素。于此同时原tx11的清单中LAUNCHER依旧存在。从apk反编译的清单如下</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.termux.x11.MainActivity<span class="token punctuation">&quot;</span></span></span>
<span class="line">	<span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span></span>
<span class="line">			<span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.action.MAIN<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span></span>
<span class="line">			<span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.LAUNCHER<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span></span>
<span class="line">			<span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.SECONDARY_HOME<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span></span>
<span class="line">		<span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.app.shortcuts<span class="token punctuation">&quot;</span></span></span>
<span class="line">		<span class="token attr-name"><span class="token namespace">android:</span>resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@xml/shortcuts<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到自己清单中的intent-filter变为<code>&lt;intent-filter /&gt;</code>了，说明没有与原tx11的清单中的intent-filter匹配成功。</p><h3 id="run-app-后代码不更新" tabindex="-1"><a class="header-anchor" href="#run-app-后代码不更新"><span>Run app 后代码不更新</span></a></h3><p>开启强制更新</p><p><img src="`+k+'" alt="alt text"></p><h3 id="代码优化后的反射获取" tabindex="-1"><a class="header-anchor" href="#代码优化后的反射获取"><span>代码优化后的反射获取</span></a></h3><p>tx11的preference打不开，发现是代码中反射获取了<code>androidx.preference.Preference</code>的一个函数<code>onSetInitialValue</code>没获取到。查看源码是有的，但是是protect。神奇的是gradle里removeUnusedCode 和 optimizeCode 设置为true，就会导致编译后变public。</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><ul><li><p>tx11的活动打不开了。。。。闪退，报错是 <code>java.lang.UnsatisfiedLinkError: dlopen failed: library &quot;/data/app/com.termux-XAoy44sazqImUbH9oFHPNQ==/base.apk!/lib/arm64-v8a/libXlorie.so&quot; not found</code> 代码是在CmdEntryPoint static块内 加载libXlorie.so时</p><p>怪事，如果getResource找不到文件的话应该会返回null。但res不是null。libPath手动找过去也是存在的。 试试</p><ul><li>捕捉异常，让他继续往下执行试试。看看是不是搞错了？不行，后续执行native函数时找不到。</li><li>猜测是打包apk时有压缩所以无法直接用压缩包内的so，改成解压后的lib路径了。</li></ul></li><li><p>tx11的extrakeys在termux基础上二改了，导致不兼容。只好把termux的extrakeys包名和两个xml重命名一下了。</p></li><li><p>发现了一个注册返回键监听的回调<code>activity.getOnBackPressedDispatcher().addCallback</code> 可惜activity的onBackPressed没调用super的话还是用不了。</p></li></ul><h2 id="之后更新tx11时要注意" tabindex="-1"><a class="header-anchor" href="#之后更新tx11时要注意"><span>之后更新tx11时要注意</span></a></h2><ul><li><p><code>com.termux.shared.termux.extrakeys</code> 包名被改成<code>extrakeys_app</code>了。之后如果上游 这里的类有改动的话，不确定会怎么合并。最好要注意一下。 同样还有<code>view_terminal_toolbar_extra_keys.xml</code>，<code>view_terminal_toolbar_text_input.xml</code> 都是在结尾加了个<code>_app</code></p></li><li><p>如果清单文件更新了的话，可能会在tapp清单合并时出现冲突或覆盖，要注意</p></li><li><p>tapp的修改，分成两个提交吧。第一个是普通，第二个是extrakeys重命名的。因为重命名会涉及到其他类中的引用，所以更可能引起冲突</p><ul><li><p>合并tx11(1/2) 添加tx11的aar并适配 将tx11编译为aar库，并入tapp整合为单个应用。 当后续与上游同步时，应选择rebase（即保证此commit放在所有commit的最后）。</p></li><li><p>合并tx11(2/2) 重命名 冲突的extrakeys包名和两个xml 因为仅仅是简单的重命名操作，但影响了许多类（有些类的书写规范都被ide改了），所以单独放到一个commit里。 当后续与上游同步时，考虑放弃此提交，然后再手动重命名一下。</p></li><li><p>（25.02.03）现在又多了一个，将jdk改17, agp升级到8.8.0(同步tx11)</p></li></ul></li><li><p>tx11的deb更新时，VERSION不动，升级REVISION</p></li></ul><h2 id="待解决-待实现" tabindex="-1"><a class="header-anchor" href="#待解决-待实现"><span>待解决/待实现</span></a></h2><p><strong>待解决</strong></p>',18)),a("ul",null,[n[72]||(n[72]=a("li",null,[a("p",null,[s("tapp项目：用file-project structure dependencies 导入aar，会发现"),a("code",null,"implementation files('termux-x11-debug.aar')"),s("被放到了gradle根层的dependencies下，而非"),a("code",null,"android.dependencies"),s("中。不知道这俩有什么区别")])],-1)),n[73]||(n[73]=a("li",null,[a("p",null,"tapp的gradle中，没有加入tx11的gradle中的依赖，也能运行。是因为代码打包到aar中了，还是tapp本身就用到了那些依赖？")],-1)),n[74]||(n[74]=a("li",null,[a("p",null,"资源合并时，tx11和tapp的mimap图标都叫ic_launcher，导致tx11的被覆盖掉了。有没有什么不用重命名的解决方法？")],-1)),n[75]||(n[75]=a("li",null,[a("p",null,"tx11整合app，能不能切换的时候直接将其从最近任务中移除。。。否则貌似不会完全退出")],-1)),a("li",null,[n[71]||(n[71]=a("p",null,[s("25.02.07, 之前没注意过，现在每启动一次x11活动，就会多一个线程申请连接，logcat中"),a("code",null,"requestConnection com.termux E Connection failed: Connection refused"),s(". 得想办法x11活动退出时彻底结束，或者不在退出时结束但是重新开始时别新建线程。 emmm单纯多几个连接的线程会不会没啥问题？测试了只要有一个连接之后其他的都不再输出log了。")],-1)),a("ul",null,[a("li",null,[n[68]||(n[68]=s("有两个manifest的设置，taskAffinity和launchMode。另外每次跳转就是直接发送intent,这个是直接启动新activity还是在哪个函数里触发，还有是否受前两者控制？")),a("a",w,[n[67]||(n[67]=s("文档")),t(p)])]),n[69]||(n[69]=a("li",null,"一些最近任务相关的 autoRemoveFromRecents excludeFromRecents noHistory",-1)),n[70]||(n[70]=a("li",null,"即使退出termux，logcat还是不断生成，所以tx11其实没完全断掉。。想办法断掉",-1))])]),n[76]||(n[76]=a("li",null,[a("p",null,"一些函数：ActivityManager.isBackgroundRestricted() 是否可以用来检测tx11会不会冻结？ 不行 华为一直是false. tAppActivity.getTaskId(); 可以从活动获取taskId")],-1))]),n[95]||(n[95]=a("hr",null,null,-1)),n[96]||(n[96]=a("p",null,[a("strong",null,"待实现")],-1)),n[97]||(n[97]=a("ul",null,[a("li",null,[a("p",null,"悬浮窗按钮：点击切换活动，长按显示选项。选项添加一个：启动app时自动启动x11")]),a("li",null,[a("p",null,"将deb放到bootstrap的话，还要考虑用户是覆盖安装不触发bootstrap解压的情况。应该添加一个识别之类的，每次启动app的时候检查一下是否需要安装deb.")])],-1))])}const T=u(m,[["render",C],["__file","index.html.vue"]]),S=JSON.parse('{"path":"/blogs/2025/02/10-build-termux-and-tx11-into-one/","title":"将termux-app与termux-x11合并为一个应用","lang":"zh-CN","frontmatter":{"date":"2025-02-10 9:22","title":"将termux-app与termux-x11合并为一个应用","categories":["应用","android","技术"],"tags":["termux","termux-x11","termux-packages"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"termux-x11编译为依赖库","slug":"termux-x11编译为依赖库","link":"#termux-x11编译为依赖库","children":[]},{"level":2,"title":"termux-app 导入tx11依赖","slug":"termux-app-导入tx11依赖","link":"#termux-app-导入tx11依赖","children":[]},{"level":2,"title":"悬浮球","slug":"悬浮球","link":"#悬浮球","children":[]},{"level":2,"title":"打包loader为deb/bootstraps","slug":"打包loader为deb-bootstraps","link":"#打包loader为deb-bootstraps","children":[{"level":3,"title":"构建deb","slug":"构建deb","link":"#构建deb","children":[]},{"level":3,"title":"bootstraps","slug":"bootstraps","link":"#bootstraps","children":[]}]},{"level":2,"title":"一些遇到的问题和解决方法","slug":"一些遇到的问题和解决方法","link":"#一些遇到的问题和解决方法","children":[{"level":3,"title":"清单合并 相关问题","slug":"清单合并-相关问题","link":"#清单合并-相关问题","children":[]},{"level":3,"title":"Run app 后代码不更新","slug":"run-app-后代码不更新","link":"#run-app-后代码不更新","children":[]},{"level":3,"title":"代码优化后的反射获取","slug":"代码优化后的反射获取","link":"#代码优化后的反射获取","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"之后更新tx11时要注意","slug":"之后更新tx11时要注意","link":"#之后更新tx11时要注意","children":[]},{"level":2,"title":"待解决/待实现","slug":"待解决-待实现","link":"#待解决-待实现","children":[]}],"git":{"createdTime":1740053290000,"updatedTime":1740115410000,"contributors":[{"name":"ewt45","email":"79033456+ewt45@users.noreply.github.com","commits":2}]},"filePathRelative":"blogs/2025/02/10-build-termux-and-tx11-into-one/index.md"}');export{T as comp,S as data};
